package com.example.demo.dao;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.beans.PropertyDescriptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.entity.Userentity;
import com.example.demo.repo.UserRepo;
import com.example.demo.util.FieldUtil;


@Transactional("userTransactionManager")
@Component
public class UserDao<T> implements UserRepo<T>{
    
	//@Autowired
	//@Qualifier("userEntityManagerFactory")
	//EntityManagerFactory emfactory;
	@PersistenceContext(unitName = "userEntityManagerFactory")
	EntityManager em;
    private Class<T> type;
	
	
	/*
	 * @Autowired public UserDao() { Type t = getClass().getGenericSuperclass();
	 * ParameterizedType pt = (ParameterizedType)t; type =
	 * (Class)pt.getActualTypeArguments()[0]; }
	 */
	
	
      public T create(T t) {
    	  //EntityManager em = null;
    	  System.out.println("Table "+t);
    	  try {
    		  //em = emfactory.createEntityManager();
    		  System.out.println("Entity Manager object  "+em);
    		  em.merge(t);
    	  }catch(Exception e) {
    		  e.printStackTrace();
    	  }  
    	  return t;
      }
      
      @Override
    public List<T> getUser() {
    	EntityManager em = null;
    	List<T> list = null;
    	try {
    		//em = emfactory.createEntityManager();
    		Query qury = em.createNativeQuery("");
    		list = qury.getResultList();
    		
    	}catch(Exception e) {
    		
    	}
    	return list;
    }
      
      @Override
    public T update(T t, long id) {
    	//EntityManager em = null;
    	Object obj = (Object)t;
    		try {
    			String[] str2 = new String[] {"name","getAddress"};
    			
    			for(int j=0; j<str2.length; j++) {
    				Field field = FieldUtil.getField(obj).getDeclaredField(str2[j]);
    				System.out.println("Field"+ field.get(str2));
    				
    			}
    			Object singleResultObject = em.createQuery("from Userentity  u where u.id = :id").setParameter("id", id).getSingleResult();
    			String[] str = new String[] {"setName","setAddress"};
    			
    			for(int i=0; i<str.length; i++) {
    				Method method = singleResultObject.getClass().getDeclaredMethod(str[i], String.class); 
    					//Method gettermethod = obj.getClass().getDeclaredMethod(str2[j], String.class); 
    					//method.setAccessible(true);
    					//gettermethod.setAccessible(true);
        				//Object val = gettermethod.invoke(obj, null);
        				System.out.println("Val "+obj);
    					
        				method.invoke(singleResultObject, "hh");
        				em.merge(singleResultObject);
    				
    				
    				
    				
    				//method.invoke(singleResultObject, gettermethod.invoke(obj, null));
    				//System.out.println("Method "+obj.getName());
    			}
    			
    		}catch(Exception e) {
    			e.printStackTrace();
    		}
        //}
    	
    	
    	return null;
    }
      
  
      
}
